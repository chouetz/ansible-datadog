---
name: "Release"
on:
  workflow_dispatch:
    inputs:
      version:
        description: "Type of release version"
        required: true
        default: "minor"
        type: choice
        options:
          - "major"
          - "minor"
          - "patch"
      api_key:
        description: "Token to upload on ansible galaxy"
        required: true
        default: ""

jobs:
  create_new_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Compute new version
        id: compute_version
        run: |
          version=${{ github.event.inputs.version }}
          current_version=$(git tag --list | sort -t. -k1,1n -k2,2n -k3,3n | tail -1)
          echo "Current version: $current_version"
          echo "current_version=$current_version" >> $GITHUB_OUTPUT
          major=$(echo "$current_version" | cut -d"." -f1)
          minor=$(echo "$current_version" | cut -d"." -f2)
          patch=$(echo "$current_version" | cut -d"." -f3)
          if [ "$version" == "major" ]; then
            next_version="$((major+1)).0.0"
          elif [ "$version" == "minor" ]; then
            next_version="$major.$((minor+1)).0"
          else
            next_version="$major.$minor.$((patch+1))"
          fi
          echo "new_version=$next_version" >> $GITHUB_OUTPUT
          echo "New $version version: $next_version"
      - name: Generate changelog
        run: |
          git log --format=format:" - %s" ${{ steps.compute_version.outputs.current_version }}..HEAD | cut -d' ' -f2- > changelog.txt
          grep FEATURE changelog.txt && grep IMPROVEMENT changelog.txt && grep BUGFIX changelog.txt && grep DEPRECATION changelog.txt && grep DOCS changelog.txt > tmp && mv tmp changelog.txt
          head -2 CHANGELOG.md > tmp
          echo "# ${{ steps.compute_version.outputs.new_version }} / $(date "+%Y-%m-%d")" >> tmp
          cat changelog.txt >> tmp
          echo "" >> tmp
          tail -n +3 CHANGELOG.md >> tmp
          mv tmp CHANGELOG.md
      - name: Update version
        run: sed -i "s/${{ steps.compute_version.outputs.current_version }}/${{ steps.compute_version.outputs.new_version }}/" defaults/main.yml
      - name: Set up Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
      - name: Create detached commit and release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          new=${{ steps.compute_version.outputs.new_version }}
          current=${{ steps.compute_version.outputs.current_version }}
          if [ -z "$current" ]; then
            body="$(cat CHANGELOG.md)"
          else
            body="$(sed -n "/${new}/,/${current}/p" CHANGELOG.md | tail -n +2 | head -n -1)"
          fi
          release_name="Release $new"
          git commit -am "${release_name}"
          git push origin main
          git tag "$new"
          git push origin "$new"
          gh release create "$new" \
              --title="$new / $(date "+%Y-%m-%d")" \
              --notes="$body"
      - name: setup python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core
          echo "ansible-galaxy role import datadog ansible-datadog --token ${{ github.event.inputs.api_key }}"
